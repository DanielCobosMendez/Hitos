from scipy.optimize import newton
from numpy import array, zeros

############################################################################
######################## MÉTODO DE EULER IMPLÍCITO #########################
############################################################################

def Euler(U, dt, F, t): # U(n+1) = U(n) + dt * F

    return U + dt * F(U, t)

############################################################################
############################### MÉTODO RK2 #################################
############################################################################

def RK2(U, dt, F, t): # U(n+1) = U(n) + dt/2 * (K1 + K2)
    K1_RK2 = F(U, t)
    K2_RK2 = F(U + K1_RK2*dt, t + dt)
    return U + dt/2 * (K1_RK2 + K2_RK2)

############################################################################
############################### MÉTODO RK4 #################################
############################################################################

def RK4(U, dt, F, t): # U(n+1) = U(n) + dt/6 * (K1 + 2*K2 + 2*K3 + K4)
    K1_RK4 = F(U, t)
    K2_RK4 = F(U + K1_RK4*dt/2, t + dt/2)
    K3_RK4 = F(U + K2_RK4*dt/2, t + dt/2)
    K4_RK4 = F(U + K3_RK4*dt, t + dt)
    return U + dt/6 * (K1_RK4 + 2 * K2_RK4 + 2 * K3_RK4 + K4_RK4)

############################################################################
######################## MÉTODO DE EULER INVERSO ###########################
############################################################################

def EulerI(U, dt, F, t):
    def G(X):
        return X-U-dt*F(X, t)
    return newton(G, U, maxiter=500)

############################################################################
###################### MÉTODO DE CRANK-NICHOLSON ###########################
############################################################################

def CrankNicholson(U, dt, F, t):
    def G(X):
        return X-U-dt/2*(F(X, t)+F(U,t))
    return newton(G, U, maxiter=500)

############################################################################
########################### PROBLEMA DE CAUCHY #############################
############################################################################

def Cauchy(F, t, N, U0, Esquema):
    U = array(zeros((N, len(U0)))) # Definición de U
    U[0,:] = U0 # Asignación del vector de estado inicial
    for i in range(1, N):
        U[i, :] = Esquema(U[i-1,:], t/N, F, t) # Llamada al esquema numérico, e integración por cada paso temporal
    return U
